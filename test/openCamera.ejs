<!DOCTYPE html>
<html lang="zh-Hant">

<head>
    <title>Webcam Test</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
        integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <!-- /Bootstrap CSS -->

    <link rel="stylesheet" href="style.css" type="text/css" media="all">
</head>

<body>
    <div class="container">
        <div class="card">
            <div class="card-body">
                <div class="row mb-4">
                    <div class="col-12">
                        <h1 class="text-center mb-3">Webcam Test</h1>
                        <p>
                            <small class="text-muted">
                                （開發環境使用 Chrome 瀏覽器）
                            </small>
                        </p>
                    </div>
                </div>

                <div class="row mb-5 justify-content-center align-items-center">
                    <div class="col-md-6 text-center">
                        <div class="video-container d-flex align-items-center justify-content-center">
                            <div class="is-recording"></div>
                            <video id="inputVideo" alt="在這裡錄影" muted>Video stream not available.</video>
                        </div>
                    </div>

                    <div class="col-md-6 text-center">
                        <div class="video-container d-flex align-items-center justify-content-center">
                            <video id="outputVideo" alt="錄好的畫面將會出現在這" muted>Video stream not available.</video>
                        </div>
                    </div>
                </div>

                <div class="row mb-4 justify-content-center align-items-center">
                    <div class="col-4 d-flex justify-content-center align-items-center">
                        <button id="startBtn" class="btn btn-sm btn-outline-primary">Start Recording</button>
                        <button id="stopBtn" class="btn btn-sm btn-outline-danger" style="display:none">Stop
                            Recording</button>
                        <button id="resetBtn" class="btn btn-sm btn-outline-info" style="display:none">Restart
                            Recorder</button>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12">
                        <div role="alert" id="errorMsg"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Vendor -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
        integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"
        integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
        crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"
        integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
        crossorigin="anonymous"></script>
    <!-- Vendor -->

    <!-- mian -->
    <script>
        'use strict'
        /* global MediaRecorder, Blob, URL */

        /**
         * Get DOM element
         */
        // <video> element
        let inputVideo = document.querySelector('#inputVideo')
        let outputVideo = document.querySelector('#outputVideo')

        // <button> element
        let startBtn = document.querySelector('#startBtn')
        let stopBtn = document.querySelector('#stopBtn')
        let resetBtn = document.querySelector('#resetBtn')

        // error message
        let errorElement = document.querySelector('#errorMsg')

        // is-recording icon
        let isRecordingIcon = document.querySelector('.is-recording')

        /**
         * Global variables
         */
        let chunks = [] // 在 mediaRecord 要用的 chunks

        // 在 getUserMedia 使用的 constraints 變數
        let constraints = {
            audio: true,
            video: true
        }

        // 第一次啟動攝影機
        mediaRecorderSetup()

        /**
         * MediaRecorder Related Event Handler
         */
        let mediaRecorder = null
        let inputVideoURL = null
        let outputVideoURL = null

        startBtn.addEventListener('click', onStartRecording)
        stopBtn.addEventListener('click', onStopRecording)
        resetBtn.addEventListener('click', onReset)

        /**
         * MediaRecorder Methods
         */
        // Start Recording: mediaRecorder.start()
        function onStartRecording(e) {
            e.preventDefault()
            e.stopPropagation()
            isRecordingBtn('stop')
            mediaRecorder.start()
            console.log('mediaRecorder.start()')
        }

        // Stop Recording: mediaRecorder.stop()
        function onStopRecording(e) {
            e.preventDefault()
            e.stopPropagation()
            isRecordingBtn('reset')
            mediaRecorder.stop()
            console.log('mediaRecorder.stop()')
        }

        // Reset Recording
        function onReset(e) {
            e.preventDefault()
            e.stopPropagation()

            // 釋放記憶體
            URL.revokeObjectURL(inputVideoURL)
            URL.revokeObjectURL(outputVideoURL)
            outputVideo.src = ''
            outputVideo.controls = false
            inputVideo.src = ''

            // 重新啟動攝影機
            mediaRecorderSetup()
        }

        /**
         * Setup MediaRecorder
         **/

        function mediaRecorderSetup() {
            // 設定顯示的按鍵
            isRecordingBtn('start')

            // mediaDevices.getUserMedia() 取得使用者媒體影音檔
            navigator.mediaDevices
                .getUserMedia(constraints)
                .then(function (stream) {
                    /**
                     * inputVideo Element
                     * 將串流的 inputVideo 設定到 <video> 上
                     **/
                    // Older browsers may not have srcObject
                    if ('srcObject' in inputVideo) {
                        inputVideo.srcObject = stream
                    } else {
                        // Avoid using this in new browsers, as it is going away.
                        inputVideo.src = window.URL.createObjectURL(stream)
                    }
                    inputVideo.controls = false

                    /**
                     * 透過 MediaRecorder 錄製影音串流
                     */
                    // 建立 MediaRecorder 準備錄影
                    // 如果沒有指定 mimeType，錄下來的 webm 影片在 Firefox 上可能不能看（Firefox 也不支援 h264)
                    mediaRecorder = new MediaRecorder(stream, {
                        mimeType: 'video/webm;codecs=VP9'
                    })

                    /* MediaRecorder EventHandler */
                    mediaRecorder.addEventListener(
                        'dataavailable',
                        mediaRecorderOnDataAvailable
                    ) // 有資料傳入時觸發
                    mediaRecorder.addEventListener('stop', mediaRecorderOnStop) // 停止錄影時觸發

                    function mediaRecorderOnDataAvailable(e) {
                        console.log('mediaRecorder on dataavailable', e.data)
                        chunks.push(e.data)
                    }

                    function mediaRecorderOnStop(e) {
                        console.log('mediaRecorder on stop')
                        outputVideo.controls = true
                        var blob = new Blob(chunks, { type: 'video/webm' })
                        chunks = []
                        outputVideoURL = URL.createObjectURL(blob)
                        outputVideo.src = outputVideoURL

                        // saveData(outputVideoURL)

                        // 停止所有的輸入或輸出的串流裝置（例如，關攝影機）
                        stream.getTracks().forEach(function (track) {
                            track.stop()
                        })
                    }
                })
                .catch(function (error) {
                    if (error.name === 'ConstraintNotSatisfiedError') {
                        errorMsg(
                            'The resolution ' +
                            constraints.video.width.exact +
                            'x' +
                            constraints.video.width.exact +
                            ' px is not supported by your device.'
                        )
                    } else if (error.name === 'PermissionDeniedError') {
                        errorMsg('Permissions have not been granted to use your media devices')
                    }
                    errorMsg('getUserMedia error: ' + error.name, error)
                })
        }

        /**
         * DOM EventListener
         */
        inputVideo.addEventListener('loadedmetadata', function () {
            inputVideo.play()
            console.log('inputVideo on loadedmetadata')
        })

        /**
         * Other Function
         */
        function errorMsg(msg, error) {
            console.log('errorElement', errorElement)
            errorElement.classList.add('alert', 'alert-warning')
            errorElement.innerHTML += msg
            if (typeof error !== 'undefined') {
                console.error(error)
            }
        }

        function saveData(dataURL) {
            var fileName = 'my-download-' + Date.now() + '.webm'
            var a = document.createElement('a')
            document.body.appendChild(a)
            a.style = 'display: none'
            a.href = dataURL
            a.download = fileName
            a.click()
        }

        function isRecordingBtn(recordBtnState) {
            startBtn.style.display = 'none'
            stopBtn.style.display = 'none'
            resetBtn.style.display = 'none'
            isRecordingIcon.style.display = 'none'
            switch (recordBtnState) {
                case 'start':
                    startBtn.style.display = 'block' // show startBtn
                    break
                case 'stop':
                    stopBtn.style.display = 'block' // show stopBtn
                    isRecordingIcon.style.display = 'block'
                    break
                case 'reset':
                    resetBtn.style.display = 'block' // show resetBtn
                    break
                default:
                    console.warn('isRecordingBtn error')
            }
        }

    </script>
    <!-- mian -->
</body>

</html>